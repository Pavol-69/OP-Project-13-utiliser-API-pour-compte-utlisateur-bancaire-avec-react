openapi: 3.0.3
info:
  title: Swagger Argent Bank - OpenAPI 3.0
  description: |-
    For the second phase of our Argent Application, we need to define the transactions API calls in order to allow the user to :
    - Visualize all their transactions for the on going month, grouped by bank account
    - Visualize all transactions details in another view
    - Add / update / delete informations about a transaction
    
    For the first phase, you can check our Github repository :
    - [Argent Bank repository](https://github.com/Pavol-69/OP-Project-13-utiliser-API-pour-compte-utlisateur-bancaire-avec-react)


  version: 1.0.0

tags:
  - name: transaction
    description: All calls relative to transaction
    externalDocs:
      description: Find out more
      url: http://swagger.io

paths:
  /api/v1/transaction/getAllAccounts:
    get:
      tags:
        - transaction
      summary: Get all accounts from user
      description: Get all accounts from user, in order to see all of them display on userPage
      operationId: getAllAccounts
      parameters:
        - name: Authorization
          in: header
          description: Attach Bearer JWT token to identify the user we want all the accounts
          required: true
          schema:
            type: string
            default: available

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Account'
        '401':
          description: User not found
      security:
        - Bearer: []
        
  
  /api/v1/transaction/getAllTransactions/{accountId}:
    get:
      tags:
        - transaction
      summary: Get all transactions of one account from current month
      description: On userPage, when we click on one account, we want to have every transaction of this account, made during the current month, displayed
      operationId: getAllTransaction
      parameters:
        - name: Authorization
          in: header
          description: Attach Bearer JWT token to identify the user making the request
          required: true
          schema:
            type: string
            default: available
        - name: accountId
          in: path
          description: ID of account where we want to have all transactions
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: transaction successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    xml:
                      wrapped: true
                    items:
                      $ref: '#/components/schemas/Transaction'          

        '401':
          description: User not found
        '403':
          description: User not allowed to access to the account
        '404':
          description: account ID not found
      security:
        - Bearer: []



  /api/v1/transaction/{transactionId}:
    get:
      tags:
        - transaction
      summary: Find transaction by ID
      description: Returns a single transaction based on its id
      operationId: getTransactionById
      parameters:
        - name: Authorization
          in: header
          description: Attach Bearer JWT token to identify the user asking for the transaction
          required: true
          schema:
            type: string
            default: available
        - name: transactionId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'          
        '401':
          description: User not found
        '403':
          description: User not allowed to access to the transaction
        '404':
          description: Transaction ID not found
      security:
        - Bearer: []
    patch:
      tags:
        - transaction
      summary: Updates a transaction data
      description: User is allowed to modify some informations of a transaction, which are category and notes. With this API call, he can add / modify / delete these informations
      operationId: updateTransaction
      parameters:
        - name: Authorization
          in: header
          description: Attach Bearer JWT token to identify the user asking for the transaction
          required: true
          schema:
            type: string
            default: available
        - name: transactionId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                notes:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'          
        '401':
          description: User not found
        '403':
          description: User not allowed to access to the transaction
        '404':
          description: Transaction ID not found
      security:
        - Bearer: []
    


components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        accountId:
          type: integer
          format: int64
          example: 1
        date:
          type: string
          format: date
          example: '20/06/2020'
        description:
          type: string
          example: Golden Sun Bakery
        currency:
          type: string
          example: $
        amount:
          type: number
          example: 5
        balance:
          type: number
          example: 2082.79
        transactionType:
          type: string
          example: Electronic
        category:
          type: string
          example: Food
        notes:
          type: string
          example: Lunch with collegues
      xml:
        name: transaction
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Argent Bank Credit Card (x8349)
        currency:
          type: string
          example: $
        balance:
          type: number
          example: 2082.79
      xml:
        name: account

  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header